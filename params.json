{"name":"Capdrupal","tagline":"A set of capistrano recipies for working with drupal ","body":"# Capdrupal\r\n\r\nThis gem provides a number of tasks which are useful for deploying Drupal projects with [Capistrano](https://github.com/capistrano/capistrano). \r\n\r\n\r\n## Installation\r\n[gems](http://rubygems.org) must be installed on your system first.\r\n\r\n### From RubyGems.org \r\n\r\n    $ gem install capdrupal\r\n\r\n### From Github\r\n\r\n\t$ git clone git://github.com/antistatique/capdrupal.git\r\n\t$ cd capdrupal\r\n\t$ gem build capdrupal.gemspec\r\n\t$ gem install capdrupal-{version}.gem\r\n\r\n\t\r\n## Configuration\r\n\r\nIt's highly recommended to use Git in your project, but you can also use Subversion or your favorite versionning software. This tutorial his made for multistage deployment, but you can easily use it just for one target. \r\n\r\nFirst, go to your project directory and launch Capistrano.\r\n\r\n\t$ cd path/to/your/directory/\r\n\t$ capify .\r\n\t\r\nCapistrano create two files `capfile` and `config/deploy.rb`. Open `capfile` and set the depencies.\r\n\r\n\trequire 'rubygems'\r\n\trequire 'capdrupal'\r\n\tload    'config/deploy'\r\n\t\r\nThen, go to `config/deploy.rb` to set the parameters of your project. First you have to define the general informations (generaly use by multiple server) and the different stage you have.\r\n\r\n\t# USER\r\n\tset :user,            \"name\"\r\n\tset :group,           \"name\"\r\n\tset :runner_group,    \"name\"\r\n\t\r\n\t# APP\r\n\tset :application,     \"appName\"\r\n\tset :stages,          %w(stage1 stage2)\r\n\r\nThe specific Drupal informations and if you have already or not [Drush](https://drupal.org/project/drush) installed on your server (if your not sure, keep it TRUE).\r\n\r\n\t# DRUPAL\r\n\tset :app_path,        \"drupal\"\r\n\tset :shared_children, ['drupal/sites/default/files']\r\n\tset :shared_files,    ['drupal/sites/default/settings.php'] \r\n\tset :download_drush,  true\r\n\r\nThen, all the informations related to your Git repository\r\n\r\n\tset :scm,            \"git\"\r\n\tset :repository,     \"git@github.com:user/repo-name.git\"\r\n\t\r\nFinally, set the other Capistrano related options, the number of realeases you want and the cleanup at the end of the deployment.\r\n\r\n\tset :use_sudo,       false\r\n\tdefault_run_options[:pty] = true\r\n\tssh_options[:forward_agent] = true\t\r\n\trole :app,           domain\r\n\trole :db,            domain\r\n\t\r\n\tset  :keep_releases,   5\r\n\tafter \"deploy:update\", \"deploy:cleanup\" \r\n\t\r\nAwesome, your configuration file is almost complete ! From now and whenever you want to add a new stage, create an new file in `config/deploy/` with in :\r\n\r\n\t# Stage name (same as your filename, for example stage1.rb)\r\n\tset :stages,    \"stage1\"\r\n\r\n\t# The Git branch you want to use\r\n\tset :branch,    \"dev\"\r\n\t\r\n\t# The domain and the path to your app directory\r\n\tset :domain,    \"staging.domain.com\"\r\n\tset :deploy_to, \"/home/path/to/my/app/\"\r\n\r\n\t# And the user if it's not the same as define in deploy.rb\r\n\tset :user,           \"staging\"\r\n\tset :group,          \"staging\"\r\n\tset :runner_group,   \"staging\"\r\n\r\n## Usage\r\n\r\nSo, after configuration come action ! The first time, you have to run this command with the choosing stage.\r\n\r\n\t$ cap stage1 deploy:setup\r\n\t\r\nIn fact, Capistrano create directories and symlink to the targeted server. The `shared` directory contains all shared files of your app who don't need to be change. `Releases` contains the different releases of your app with a number define in `deploy.rb` and finally `current` is the symlink who target the right release.\r\n\r\n\tmyApp\r\n\t├── current -> /home/myApp/releases/20130527070530\r\n\t├── releases\r\n\t│   ├── 20130527065508\r\n\t│   ├── 20130527065907\r\n\t│   └── 20130527070530\r\n\t└── shared\r\n\r\nNow, every time you want to deploy you app !\r\n\r\n\t$ cap stage1 deploy\r\n\t\r\nAnd if some troubles occur, juste launch the rollback command to return to the previous release.\r\n\r\n\t$ cap deploy:rollback\r\n\r\n\r\nYou should then be able to proceed as you would usually, you may want to familiarise yourself with the truncated list of tasks, you can get a full list with:\r\n\r\n    $ cap -T\r\n    \r\nThis show a list of all avaible commands:\r\n    \r\n\tcap deploy                # Deploys your project.\r\n\tcap deploy:check          # Test deployment dependencies.\r\n\tcap deploy:cleanup        # Clean up old releases.\r\n\tcap deploy:cold           # Deploys and starts a `cold' application.\r\n\tcap deploy:create_symlink # Updates the symlink to the most recently deployed version.\r\n\tcap deploy:pending        # Displays the commits since your last deploy.\r\n\tcap deploy:pending:diff   # Displays the `diff' since your last deploy.\r\n\tcap deploy:rollback       # Rolls back to a previous version and restarts.\r\n\tcap deploy:rollback:code  # Rolls back to the previously deployed version.\r\n\tcap deploy:setup          # Prepares one or more servers for deployment.\r\n\tcap deploy:symlink        # Deprecated.\r\n\tcap deploy:update         # Copies your project and updates the symlink.\r\n\tcap deploy:update_code    # Copies your project to the remote servers.\r\n\tcap deploy:upload         # Copy files to the currently deployed version.\r\n\tcap dev                   # Set the target stage to `dev'.\r\n\tcap drupal:symlink_shared # Symlinks static directories and static files that need to remain between d...\r\n\tcap drush:backupdb        # Backup the database\r\n\tcap drush:cache_clear     # Clear the drupal cache\r\n\tcap drush:feature_revert  # Revert feature\r\n\tcap drush:get             # Gets drush and installs it\r\n\tcap drush:site_offline    # Set the site offline\r\n\tcap drush:site_online     # Set the site online\r\n\tcap drush:updatedb        # Run Drupal database migrations if required\r\n\tcap files:pull            # Pull drupal sites files (from remote to local)\r\n\tcap files:push            # Push drupal sites files (from local to remote)\r\n\tcap git:push_deploy_tag   # Place release tag into Git and push it to origin server.\r\n\tcap invoke                # Invoke a single command on the remote servers.\r\n\tcap multistage:prepare    # Stub out the staging config files.\r\n\tcap prod                  # Set the target stage to `prod'.\r\n\tcap shell                 # Begin an interactive Capistrano session.\r\n\r\n\r\n## Credits\r\n\r\nInspired by [capistrano-drupal](https://github.com/previousnext/capistrano-drupal).\r\n\r\nMade by [Antistatique](http://www.antistatique.net) who's always looking for new talented developpers ! Just mail us on [hello@antistatique.net](mailto:hello@antistatique.net).\r\n","google":"UA-4367884-8","note":"Don't delete this file! It's used internally to help with page regeneration."}